[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"","code":""},{"path":"index.html","id":"about-this-course","chapter":"Welcome","heading":"About This Course","text":"recent years, mass spectrometry-based proteomics become essential tool life sciences, enabling quantitative, systems-level insights protein expression, post-translational modifications, cellular signaling dynamics. complexity volume proteomics data continue increase, demand robust, transparent, reproducible computational methods never greater.5-day intensive training course - r4proteomics - designed equip researchers, bioinformaticians, data scientists practical skills theoretical grounding necessary analyze proteomics data using R programming language Bioconductor ecosystem. combination guided tutorials, hands-exercises, real-world case studies, participants build fluency core statistical computational methods widely used proteomics research translational applications.curriculum begins foundational programming R progresses quality control, normalization, differential analysis proteomics data, culminating advanced topics functional enrichment, longitudinal modeling, integration public datasets.course ideal professionals seeking deepen expertise computational proteomics within pharmaceutical, biotechnology, academic research environments. Participants leave solid methodological framework also ready--use code templates workflows applicable projects.learn:Day 1: R fundamentals RStudio basicsDay 2: Understanding proteomic data quality controlDay 3: Data preprocessing differential expression analysisDay 4: Functional analysis, longitudinal studies, public datasetsDay 5: Real-world applications case studies","code":""},{"path":"index.html","id":"prerequisites","chapter":"Welcome","heading":"Prerequisites","text":"Basic computer literacyInterest biological data analysisNo prior R programming experience required","code":""},{"path":"index.html","id":"course-materials","chapter":"Welcome","heading":"Course Materials","text":"data files, scripts, additional resources available course repository.","code":""},{"path":"index.html","id":"how-to-use-this-book","chapter":"Welcome","heading":"How to Use This Book","text":"chapter corresponds one day training. Chapters include:Learning objectives: ’ll achieveTheory sections: Conceptual backgroundPractical exercises: Hands-codingCase studies: Real-world applications","code":""},{"path":"index.html","id":"installation-instructions","chapter":"Welcome","heading":"Installation Instructions","text":"starting Day 1, please ensure installed:","code":"\n# Install R (version >= 4.3.0) from https://cran.r-project.org/\n# Install RStudio from https://posit.co/download/rstudio-desktop/\n\n# Install required packages\ninstall.packages(c(\"tidyverse\", \"bookdown\", \"knitr\", \"rmarkdown\"))\n\n# Install Bioconductor packages\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(c(\n  \"limma\", \"vsn\", \"sva\", \"clusterProfiler\",\n  \"org.Hs.eg.db\", \"ReactomePA\", \"enrichplot\"\n))"},{"path":"index.html","id":"acknowledgments","chapter":"Welcome","heading":"Acknowledgments","text":"course developed provide hands-training proteomics data analysis.","code":""},{"path":"day1.html","id":"day1","chapter":"Day - 1 Introduction to R and RStudio","heading":"Day - 1 Introduction to R and RStudio","text":"","code":""},{"path":"day1.html","id":"learning-objectives","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.1 Learning Objectives","text":"end Day 1, able :Install navigate RStudio effectivelyUnderstand basic R data structures (vectors, data frames, lists)Import explore simple datasetsWrite basic control flow structures functions","code":""},{"path":"day1.html","id":"day1-mod1","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.2 Module 1: Setting Up and Getting Started with R","text":"","code":""},{"path":"day1.html","id":"introduction","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.2.1 Introduction","text":"R powerful programming language environment specifically designed statistical computing graphics. RStudio integrated development environment (IDE) makes working R much easier.","code":""},{"path":"day1.html","id":"installing-r-and-rstudio","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.2.2 Installing R and RStudio","text":"Install R (version 4.3.0 higher)\nVisit https://cran.r-project.org/\nDownload version appropriate operating system\nRun installer\nVisit https://cran.r-project.org/Download version appropriate operating systemRun installerInstall RStudio Desktop\nVisit https://posit.co/download/rstudio-desktop/\nDownload free Desktop version\nRun installer\nVisit https://posit.co/download/rstudio-desktop/Download free Desktop versionRun installer","code":""},{"path":"day1.html","id":"rstudio-interface-tour","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.2.3 RStudio Interface Tour","text":"RStudio four main panes:Source Editor (top-left): write edit scriptsConsole (bottom-left): code executed results appearEnvironment/History (top-right): Shows objects memory command historyFiles/Plots/Packages/Help (bottom-right): File browser, plot viewer, package manager, help documentation","code":""},{"path":"day1.html","id":"scripts-vs-console","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.2.4 Scripts vs Console","text":"Console :\n- Quick calculations\n- Testing commands\n- Interactive explorationScripts (.R .Rmd files) :\n- Saving work\n- Creating reproducible analyses\n- Organizing complex workflows","code":""},{"path":"day1.html","id":"basic-operators","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.2.5 Basic Operators","text":"","code":"\n# Arithmetic operators\n5 + 3        # Addition\n#> [1] 8\n10 - 4       # Subtraction\n#> [1] 6\n6 * 7        # Multiplication\n#> [1] 42\n20 / 4       # Division\n#> [1] 5\n2 ^ 3        # Exponentiation\n#> [1] 8\n17 %% 5      # Modulo (remainder)\n#> [1] 2\n\n# Assignment operator\nx <- 10      # Assign 10 to x\ny = 5        # Alternative (but <- is preferred)\n\n# Comparison operators\n5 == 5       # Equal to\n#> [1] TRUE\n5 != 3       # Not equal to\n#> [1] TRUE\n7 > 3        # Greater than\n#> [1] TRUE\n4 < 8        # Less than\n#> [1] TRUE\n5 >= 5       # Greater than or equal\n#> [1] TRUE\n3 <= 10      # Less than or equal\n#> [1] TRUE\n\n# Logical operators\nTRUE & FALSE  # AND\n#> [1] FALSE\nTRUE | FALSE  # OR\n#> [1] TRUE\n!TRUE         # NOT\n#> [1] FALSE"},{"path":"day1.html","id":"creating-your-first-script","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.2.6 Creating Your First Script","text":"","code":"\n# Create a new R script: File > New File > R Script\n# Or use Ctrl+Shift+N (Windows/Linux) or Cmd+Shift+N (Mac)\n\n# Write your code\nmessage(\"Hello, Proteomics World!\")\n\n# Save your script: File > Save\n# Run code: Ctrl+Enter (Windows/Linux) or Cmd+Return (Mac)"},{"path":"day1.html","id":"exercise-1.1-first-steps","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.2.7 Exercise 1.1: First Steps","text":"Create new R script :Calculate sum 123 456Assign result variable called totalPrint value totalCalculate percentage 123 total","code":"\n# Solution\nresult1 <- 123 + 456\ntotal <- result1\nprint(total)\n#> [1] 579\n\npercentage <- (123 / total) * 100\nprint(paste0(\"123 is \", round(percentage, 2), \"% of the total\"))\n#> [1] \"123 is 21.24% of the total\""},{"path":"day1.html","id":"day1-mod2","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.3 Module 2: Data Types and Structures","text":"","code":""},{"path":"day1.html","id":"vectors","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.3.1 Vectors","text":"Vectors basic data structure R. contain elements type.","code":"\n# Numeric vectors\nages <- c(25, 30, 35, 40, 45)\nprint(ages)\n#> [1] 25 30 35 40 45\n\n# Character vectors\nnames <- c(\"Alice\", \"Bob\", \"Charlie\", \"Diana\", \"Eve\")\nprint(names)\n#> [1] \"Alice\"   \"Bob\"     \"Charlie\" \"Diana\"   \"Eve\"\n\n# Logical vectors\npassed_qc <- c(TRUE, TRUE, FALSE, TRUE, TRUE)\nprint(passed_qc)\n#> [1]  TRUE  TRUE FALSE  TRUE  TRUE\n\n# Sequences\nseq_1_10 <- 1:10\nseq_custom <- seq(from = 0, to = 100, by = 10)"},{"path":"day1.html","id":"indexing-and-subsetting","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.3.2 Indexing and Subsetting","text":"","code":"\n# Access elements by position (1-indexed!)\nages[1]           # First element\n#> [1] 25\nages[c(1, 3, 5)]  # Multiple elements\n#> [1] 25 35 45\nages[-2]          # All except second element\n#> [1] 25 35 40 45\n\n# Logical indexing\nages[ages > 35]   # Elements greater than 35\n#> [1] 40 45\n\n# Named vectors\nprotein_abundance <- c(ACTB = 1500, GAPDH = 2000, MYC = 800)\nprotein_abundance[\"ACTB\"]\n#> ACTB \n#> 1500"},{"path":"day1.html","id":"data-frames","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.3.3 Data Frames","text":"Data frames common structure storing tabular data.","code":"\n# Create a data frame\npatient_data <- data.frame(\n  patient_id = 1:5,\n  name = c(\"Alice\", \"Bob\", \"Charlie\", \"Diana\", \"Eve\"),\n  age = c(25, 30, 35, 40, 45),\n  treatment = c(\"A\", \"B\", \"A\", \"B\", \"A\"),\n  response = c(TRUE, TRUE, FALSE, TRUE, FALSE),\n  stringsAsFactors = FALSE\n)\n\nprint(patient_data)\n#>   patient_id    name age treatment response\n#> 1          1   Alice  25         A     TRUE\n#> 2          2     Bob  30         B     TRUE\n#> 3          3 Charlie  35         A    FALSE\n#> 4          4   Diana  40         B     TRUE\n#> 5          5     Eve  45         A    FALSE\n\n# View structure\nstr(patient_data)\n#> 'data.frame':    5 obs. of  5 variables:\n#>  $ patient_id: int  1 2 3 4 5\n#>  $ name      : chr  \"Alice\" \"Bob\" \"Charlie\" \"Diana\" ...\n#>  $ age       : num  25 30 35 40 45\n#>  $ treatment : chr  \"A\" \"B\" \"A\" \"B\" ...\n#>  $ response  : logi  TRUE TRUE FALSE TRUE FALSE\n\n# Summary statistics\nsummary(patient_data)\n#>    patient_id     name                age    \n#>  Min.   :1    Length:5           Min.   :25  \n#>  1st Qu.:2    Class :character   1st Qu.:30  \n#>  Median :3    Mode  :character   Median :35  \n#>  Mean   :3                       Mean   :35  \n#>  3rd Qu.:4                       3rd Qu.:40  \n#>  Max.   :5                       Max.   :45  \n#>   treatment          response      \n#>  Length:5           Mode :logical  \n#>  Class :character   FALSE:2        \n#>  Mode  :character   TRUE :3        \n#>                                    \n#>                                    \n#> \n\n# Access columns\npatient_data$age\n#> [1] 25 30 35 40 45\npatient_data[, \"name\"]\n#> [1] \"Alice\"   \"Bob\"     \"Charlie\" \"Diana\"   \"Eve\"\npatient_data[, 2]\n#> [1] \"Alice\"   \"Bob\"     \"Charlie\" \"Diana\"   \"Eve\"\n\n# Access rows\npatient_data[1, ]           # First row\n#>   patient_id  name age treatment response\n#> 1          1 Alice  25         A     TRUE\npatient_data[1:3, ]         # First three rows\n#>   patient_id    name age treatment response\n#> 1          1   Alice  25         A     TRUE\n#> 2          2     Bob  30         B     TRUE\n#> 3          3 Charlie  35         A    FALSE\n\n# Access specific cells\npatient_data[2, 3]          # Row 2, Column 3\n#> [1] 30\npatient_data[2, \"age\"]      # Same, using column name\n#> [1] 30\n\n# Subset by condition\npatient_data[patient_data$age > 30, ]\n#>   patient_id    name age treatment response\n#> 3          3 Charlie  35         A    FALSE\n#> 4          4   Diana  40         B     TRUE\n#> 5          5     Eve  45         A    FALSE\npatient_data[patient_data$treatment == \"A\", ]\n#>   patient_id    name age treatment response\n#> 1          1   Alice  25         A     TRUE\n#> 3          3 Charlie  35         A    FALSE\n#> 5          5     Eve  45         A    FALSE"},{"path":"day1.html","id":"lists","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.3.4 Lists","text":"Lists can contain elements different types structures.","code":"\n# Create a list\nexperiment <- list(\n  experiment_id = \"EXP001\",\n  date = \"2025-01-15\",\n  samples = c(\"S1\", \"S2\", \"S3\"),\n  data = patient_data,\n  validated = TRUE\n)\n\n# Access list elements\nexperiment$experiment_id\n#> [1] \"EXP001\"\nexperiment[[1]]\n#> [1] \"EXP001\"\nexperiment[[\"samples\"]]\n#> [1] \"S1\" \"S2\" \"S3\""},{"path":"day1.html","id":"factors","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.3.5 Factors","text":"Factors used categorical data.","code":"\n# Create factor\ntreatment_factor <- factor(c(\"Control\", \"Drug A\", \"Drug B\", \"Control\", \"Drug A\"))\nprint(treatment_factor)\n#> [1] Control Drug A  Drug B  Control Drug A \n#> Levels: Control Drug A Drug B\n\n# Check levels\nlevels(treatment_factor)\n#> [1] \"Control\" \"Drug A\"  \"Drug B\"\n\n# Ordered factors\nseverity <- factor(\n  c(\"Mild\", \"Severe\", \"Moderate\", \"Mild\", \"Severe\"),\n  levels = c(\"Mild\", \"Moderate\", \"Severe\"),\n  ordered = TRUE\n)\nprint(severity)\n#> [1] Mild     Severe   Moderate Mild     Severe  \n#> Levels: Mild < Moderate < Severe"},{"path":"day1.html","id":"type-coercion","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.3.6 Type Coercion","text":"","code":"\n# Implicit coercion\nmixed <- c(1, 2, \"three\", 4)  # All converted to character\nprint(mixed)\n#> [1] \"1\"     \"2\"     \"three\" \"4\"\n\n# Explicit coercion\nnumbers_char <- c(\"1\", \"2\", \"3\", \"4\")\nnumbers_num <- as.numeric(numbers_char)\nprint(numbers_num)\n#> [1] 1 2 3 4\n\n# Check types\nclass(mixed)\n#> [1] \"character\"\nis.numeric(mixed)\n#> [1] FALSE\nis.character(mixed)\n#> [1] TRUE"},{"path":"day1.html","id":"exercise-1.2-data-structures","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.3.7 Exercise 1.2: Data Structures","text":"Create data frame proteomic experiment :10 protein IDs (P001 P010)Random abundance values 100 5000Random p-values 0 1Significance status (TRUE p-value < 0.05)","code":"\n# Solution\nset.seed(42)  # For reproducibility\n\nproteins <- data.frame(\n  protein_id = paste0(\"P\", sprintf(\"%03d\", 1:10)),\n  abundance = round(runif(10, min = 100, max = 5000), 2),\n  p_value = runif(10, min = 0, max = 1),\n  stringsAsFactors = FALSE\n)\n\nproteins$significant <- proteins$p_value < 0.05\n\nprint(proteins)\n#>    protein_id abundance   p_value significant\n#> 1        P001   4582.55 0.4577418       FALSE\n#> 2        P002   4691.67 0.7191123       FALSE\n#> 3        P003   1502.08 0.9346722       FALSE\n#> 4        P004   4169.19 0.2554288       FALSE\n#> 5        P005   3244.55 0.4622928       FALSE\n#> 6        P006   2643.57 0.9400145       FALSE\n#> 7        P007   3709.28 0.9782264       FALSE\n#> 8        P008    759.87 0.1174874       FALSE\n#> 9        P009   3319.26 0.4749971       FALSE\n#> 10       P010   3554.82 0.5603327       FALSE\n\n# Summary\ncat(\"\\nNumber of significant proteins:\", sum(proteins$significant), \"\\n\")\n#> \n#> Number of significant proteins: 0"},{"path":"day1.html","id":"day1-mod3","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.4 Module 3: Control Flow and Functions","text":"","code":""},{"path":"day1.html","id":"conditional-statements","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.4.1 Conditional Statements","text":"","code":"\n# if statement\nx <- 10\n\nif (x > 5) {\n  print(\"x is greater than 5\")\n}\n#> [1] \"x is greater than 5\"\n\n# if-else\nif (x > 15) {\n  print(\"x is greater than 15\")\n} else {\n  print(\"x is 15 or less\")\n}\n#> [1] \"x is 15 or less\"\n\n# if-else if-else\nscore <- 75\n\nif (score >= 90) {\n  grade <- \"A\"\n} else if (score >= 80) {\n  grade <- \"B\"\n} else if (score >= 70) {\n  grade <- \"C\"\n} else {\n  grade <- \"F\"\n}\n\nprint(paste(\"Grade:\", grade))\n#> [1] \"Grade: C\"\n\n# Vectorized ifelse\nvalues <- c(1, 5, 10, 15, 20)\ncategories <- ifelse(values > 10, \"High\", \"Low\")\nprint(categories)\n#> [1] \"Low\"  \"Low\"  \"Low\"  \"High\" \"High\""},{"path":"day1.html","id":"loops","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.4.2 Loops","text":"","code":"\n# for loop\nfor (i in 1:5) {\n  print(paste(\"Iteration:\", i))\n}\n#> [1] \"Iteration: 1\"\n#> [1] \"Iteration: 2\"\n#> [1] \"Iteration: 3\"\n#> [1] \"Iteration: 4\"\n#> [1] \"Iteration: 5\"\n\n# Loop through vector\nproteins <- c(\"ACTB\", \"GAPDH\", \"MYC\")\nfor (protein in proteins) {\n  print(paste(\"Processing:\", protein))\n}\n#> [1] \"Processing: ACTB\"\n#> [1] \"Processing: GAPDH\"\n#> [1] \"Processing: MYC\"\n\n# while loop\ncounter <- 1\nwhile (counter <= 5) {\n  print(paste(\"Counter:\", counter))\n  counter <- counter + 1\n}\n#> [1] \"Counter: 1\"\n#> [1] \"Counter: 2\"\n#> [1] \"Counter: 3\"\n#> [1] \"Counter: 4\"\n#> [1] \"Counter: 5\"\n\n# Loop with condition\nnumbers <- 1:10\nfor (num in numbers) {\n  if (num %% 2 == 0) {\n    print(paste(num, \"is even\"))\n  }\n}\n#> [1] \"2 is even\"\n#> [1] \"4 is even\"\n#> [1] \"6 is even\"\n#> [1] \"8 is even\"\n#> [1] \"10 is even\""},{"path":"day1.html","id":"functions","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.4.3 Functions","text":"","code":"\n# Basic function\ngreet <- function(name) {\n  message <- paste(\"Hello,\", name, \"!\")\n  return(message)\n}\n\ngreet(\"Alice\")\n#> [1] \"Hello, Alice !\"\n\n# Function with multiple parameters\ncalculate_fold_change <- function(treatment, control) {\n  fc <- treatment / control\n  log2_fc <- log2(fc)\n  return(log2_fc)\n}\n\ncalculate_fold_change(treatment = 200, control = 100)\n#> [1] 1\n\n# Function with default parameters\nnormalize_abundance <- function(abundance, method = \"median\") {\n  if (method == \"median\") {\n    normalized <- abundance / median(abundance, na.rm = TRUE)\n  } else if (method == \"mean\") {\n    normalized <- abundance / mean(abundance, na.rm = TRUE)\n  } else {\n    stop(\"Method must be 'median' or 'mean'\")\n  }\n  return(normalized)\n}\n\nvalues <- c(100, 200, 300, 400, 500)\nnormalize_abundance(values)\n#> [1] 0.3333333 0.6666667 1.0000000 1.3333333 1.6666667\nnormalize_abundance(values, method = \"mean\")\n#> [1] 0.3333333 0.6666667 1.0000000 1.3333333 1.6666667"},{"path":"day1.html","id":"apply-family-functions","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.4.4 Apply Family Functions","text":"","code":"\n# Create sample data\nprotein_matrix <- matrix(\n  c(100, 150, 200, 250, \n    110, 160, 210, 260,\n    120, 170, 220, 270),\n  nrow = 3, byrow = TRUE\n)\ncolnames(protein_matrix) <- c(\"Sample1\", \"Sample2\", \"Sample3\", \"Sample4\")\nrownames(protein_matrix) <- c(\"Protein1\", \"Protein2\", \"Protein3\")\n\nprint(protein_matrix)\n#>          Sample1 Sample2 Sample3 Sample4\n#> Protein1     100     150     200     250\n#> Protein2     110     160     210     260\n#> Protein3     120     170     220     270\n\n# apply: apply function to rows or columns\nrow_means <- apply(protein_matrix, 1, mean)  # 1 = rows\ncol_means <- apply(protein_matrix, 2, mean)  # 2 = columns\n\nprint(row_means)\n#> Protein1 Protein2 Protein3 \n#>      175      185      195\nprint(col_means)\n#> Sample1 Sample2 Sample3 Sample4 \n#>     110     160     210     260\n\n# lapply: apply function to list, returns list\nmy_list <- list(a = 1:5, b = 6:10, c = 11:15)\nlist_means <- lapply(my_list, mean)\nprint(list_means)\n#> $a\n#> [1] 3\n#> \n#> $b\n#> [1] 8\n#> \n#> $c\n#> [1] 13\n\n# sapply: simplified version of lapply\nvector_means <- sapply(my_list, mean)\nprint(vector_means)\n#>  a  b  c \n#>  3  8 13"},{"path":"day1.html","id":"exercise-1.3-functions-and-loops","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.4.5 Exercise 1.3: Functions and Loops","text":"Write function :Takes vector protein abundancesCalculates coefficient variation (CV = sd/mean * 100)Returns “Pass” CV < 20%, “Fail” otherwiseApply function multiple samples using loop.","code":"\n# Solution\ncalculate_cv_status <- function(abundances) {\n  cv <- (sd(abundances, na.rm = TRUE) / mean(abundances, na.rm = TRUE)) * 100\n  \n  if (cv < 20) {\n    status <- \"Pass\"\n  } else {\n    status <- \"Fail\"\n  }\n  \n  return(list(cv = round(cv, 2), status = status))\n}\n\n# Create sample data\nsample_data <- list(\n  sample1 = c(100, 105, 98, 102, 99),\n  sample2 = c(100, 150, 90, 200, 80),\n  sample3 = c(500, 505, 498, 502, 496)\n)\n\n# Apply function\nfor (sample_name in names(sample_data)) {\n  result <- calculate_cv_status(sample_data[[sample_name]])\n  cat(sample_name, \"- CV:\", result$cv, \"% - Status:\", result$status, \"\\n\")\n}\n#> sample1 - CV: 2.75 % - Status: Pass \n#> sample2 - CV: 40.56 % - Status: Fail \n#> sample3 - CV: 0.7 % - Status: Pass"},{"path":"day1.html","id":"importing-and-exploring-data","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.5 Importing and Exploring Data","text":"","code":""},{"path":"day1.html","id":"reading-csv-files","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.5.1 Reading CSV Files","text":"","code":"\n# Read CSV\ndata <- read.csv(\"data/proteins.csv\")\n\n# Read with tidyverse\nlibrary(readr)\ndata <- read_csv(\"data/proteins.csv\")\n\n# Read tab-delimited\ndata <- read.delim(\"data/proteins.txt\", sep = \"\\t\")"},{"path":"day1.html","id":"basic-data-exploration","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.5.2 Basic Data Exploration","text":"","code":"\n# Create example data\nset.seed(123)\nprotein_data <- data.frame(\n  protein_id = paste0(\"P\", 1:100),\n  abundance = rnorm(100, mean = 1000, sd = 200),\n  condition = rep(c(\"Control\", \"Treatment\"), each = 50)\n)\n\n# Dimensions\ndim(protein_data)\n#> [1] 100   3\nnrow(protein_data)\n#> [1] 100\nncol(protein_data)\n#> [1] 3\n\n# First and last rows\nhead(protein_data)\n#>   protein_id abundance condition\n#> 1         P1  887.9049   Control\n#> 2         P2  953.9645   Control\n#> 3         P3 1311.7417   Control\n#> 4         P4 1014.1017   Control\n#> 5         P5 1025.8575   Control\n#> 6         P6 1343.0130   Control\ntail(protein_data)\n#>     protein_id abundance condition\n#> 95         P95 1272.1305 Treatment\n#> 96         P96  879.9481 Treatment\n#> 97         P97 1437.4666 Treatment\n#> 98         P98 1306.5221 Treatment\n#> 99         P99  952.8599 Treatment\n#> 100       P100  794.7158 Treatment\n\n# Summary statistics\nsummary(protein_data)\n#>   protein_id          abundance       condition        \n#>  Length:100         Min.   : 538.2   Length:100        \n#>  Class :character   1st Qu.: 901.2   Class :character  \n#>  Mode  :character   Median :1012.4   Mode  :character  \n#>                     Mean   :1018.1                     \n#>                     3rd Qu.:1138.4                     \n#>                     Max.   :1437.5\n\n# Table for categorical data\ntable(protein_data$condition)\n#> \n#>   Control Treatment \n#>        50        50"},{"path":"day1.html","id":"day-1-summary","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.6 Day 1 Summary","text":"Today learned:✓ set R RStudio✓ Basic R operators syntax✓ Data structures: vectors, data frames, lists, factors✓ Indexing subsetting data✓ Control flow: /else, loops✓ Writing custom functions✓ Importing exploring data","code":""},{"path":"day1.html","id":"homework","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.6.1 Homework","text":"Install required packages Day 2Practice writing functions data manipulationExplore built-datasets R (use data() see available datasets)","code":"\n# Install packages for Day 2\ninstall.packages(c(\"ggplot2\", \"dplyr\", \"tidyr\", \"pheatmap\"))\n\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(c(\"limma\", \"vsn\"))"},{"path":"day1.html","id":"additional-resources","chapter":"Day - 1 Introduction to R and RStudio","heading":"1.7 Additional Resources","text":"R Data Science Hadley WickhamRStudio Cheat SheetsStack Overflow questions","code":""}]
